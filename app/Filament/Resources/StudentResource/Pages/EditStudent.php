<?php

namespace App\Filament\Resources\StudentResource\Pages;

use App\Enums\Role;
use App\Filament\Resources\StudentResource;
use App\Models\User;
use Filament\Actions\Action;
use Filament\Actions\DeleteAction;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditStudent extends EditRecord
{
    protected static string $resource = StudentResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Action::make('createUser')
                ->label('Create User Access')
                ->color('success')
                ->schema([
                    TextInput::make('email')
                        ->default($this->record->getAttribute('email'))
                        ->email()
                        ->required(),
                    TextInput::make('password')
                        ->default(strtolower(preg_replace('/[^A-Za-z0-9]/', '', $this->record->getAttribute('last_name'))) . substr($this->record->getAttribute('date_of_birth'), 0, 4))
                        ->password()
                        ->required()
                        ->revealable()
                        ->maxLength(255),
                ])
                ->action(function (array $data) {
                    $user = User::create([
                        'email' => data_get($data, 'email'),
                        'name' => $this->record->full_name,
                        'password' => bcrypt(data_get($data, 'password')),
                        'role' => Role::Student,
                    ]);

                    $this->record->update([
                        'user_id' => $user->id,
                    ]);

                    Notification::make()
                        ->success()
                        ->title('User Access Created')
                        ->body('User access for '.$this->record->full_name.' has been created.')
                        ->send();
                })
                ->visible(fn () => !$this->record->getAttribute('user_id')),
            Action::make('changePassword')
                ->label('Change Password')
                ->color('warning')
                ->schema([
                    TextInput::make('password')
                        ->password()
                        ->required()
                        ->revealable()
                        ->maxLength(255),
                ])
                ->action(function (array $data) {
                    $this->record->user()->update([
                        'password' => bcrypt(data_get($data, 'password')),
                    ]);

                    Notification::make()
                        ->success()
                        ->title('Password Changed')
                        ->body('Password for '.$this->record->full_name.' has been changed.')
                        ->send();
                })
                ->visible(fn () => $this->record->getAttribute('user_id')),
            DeleteAction::make(),
        ];
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $student = parent::handleRecordUpdate($record, $data); // TODO: Change the autogenerated stub

        $student->user()->update([
            'email' => data_get($data, 'email'),
            'name' => data_get($data, 'full_name'),
        ]);

        return $student;
    }
}
